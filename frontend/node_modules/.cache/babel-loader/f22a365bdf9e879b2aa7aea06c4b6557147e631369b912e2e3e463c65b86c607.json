{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"./Modal\"; // Make sure you import the Modal component\n// import { toast } from \"sonner\";\n\n// const CreateButtonComponent = ({ apiurl, keyTypes }) => {\n//     const [editedData, setEditedData] = useState({});\n//     const [isEditing, setIsEditing] = useState(false);\n\n//     const handleInputChange = (e) => {\n//         const { name, value, type } = e.target;\n//         setEditedData((prevData) => ({\n//             ...prevData,\n//             [name]: type === \"number\" ? parseFloat(value) : value,\n//         }));\n//     };\n\n//     const handleSaveClick = async () => {\n//         try {\n//             // Validate editedData based on keyTypes\n//             for (const key in editedData) {\n//                 if (typeof editedData[key] !== keyTypes[key]) {\n//                     toast.error(`Invalid data type for key: ${key}`);\n//                     return;\n//                 }\n//             }\n\n//             const response = await axios.put(apiurl, editedData);\n\n//             if (response.status === 200) {\n//                 toast.success(\"Item modified successfully!\");\n//                 window.location.reload();\n//                 setIsEditing(false);\n//             } else {\n//                 toast.error(\"Error modifying item\");\n//             }\n//         } catch (error) {\n//             toast.error(\"Error modifying item\");\n//         }\n//     };\n\n//     const handleCancelClick = () => {\n//         setIsEditing(false);\n//         setEditedData({});\n//     };\n\n//     const filteredKeys = Object.keys(keyTypes).filter(\n//         (key) => !key.toLowerCase().includes(\"id\")\n//     );\n\n//     return (\n//         <>\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\n//             {isEditing && (\n//                 <Modal onClose={handleCancelClick}>\n//                     <form>\n//                         {filteredKeys.map((key) => (\n//                             <div key={key}>\n//                                 <label htmlFor={key}>{key}</label>\n//                                 {keyTypes[key] === \"boolean\" ? (\n//                                     <select\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     >\n//                                         <option value={true}>True</option>\n//                                         <option value={false}>False</option>\n//                                     </select>\n//                                 ) : keyTypes[key] === \"number\" ? (\n//                                     <input\n//                                         type=\"number\"\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     />\n//                                 ) : (\n//                                     <input\n//                                         type=\"text\"\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     />\n//                                 )}\n//                             </div>\n//                         ))}\n//                         <button type=\"button\" onClick={handleSaveClick}>\n//                             Save\n//                         </button>\n//                         <button type=\"button\" onClick={handleCancelClick}>\n//                             Cancel\n//                         </button>\n//                     </form>\n//                 </Modal>\n//             )}\n//         </>\n//     );\n// };\n\n// export default CreateButtonComponent;","map":{"version":3,"names":[],"sources":["/home/louis/T-WEB-501-PAR_50/frontend/src/pages/monitor/components/CreateButton.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import Modal from \"./Modal\"; // Make sure you import the Modal component\n// import { toast } from \"sonner\";\n\n// const CreateButtonComponent = ({ apiurl, keyTypes }) => {\n//     const [editedData, setEditedData] = useState({});\n//     const [isEditing, setIsEditing] = useState(false);\n\n//     const handleInputChange = (e) => {\n//         const { name, value, type } = e.target;\n//         setEditedData((prevData) => ({\n//             ...prevData,\n//             [name]: type === \"number\" ? parseFloat(value) : value,\n//         }));\n//     };\n\n//     const handleSaveClick = async () => {\n//         try {\n//             // Validate editedData based on keyTypes\n//             for (const key in editedData) {\n//                 if (typeof editedData[key] !== keyTypes[key]) {\n//                     toast.error(`Invalid data type for key: ${key}`);\n//                     return;\n//                 }\n//             }\n\n//             const response = await axios.put(apiurl, editedData);\n\n//             if (response.status === 200) {\n//                 toast.success(\"Item modified successfully!\");\n//                 window.location.reload();\n//                 setIsEditing(false);\n//             } else {\n//                 toast.error(\"Error modifying item\");\n//             }\n//         } catch (error) {\n//             toast.error(\"Error modifying item\");\n//         }\n//     };\n\n//     const handleCancelClick = () => {\n//         setIsEditing(false);\n//         setEditedData({});\n//     };\n\n//     const filteredKeys = Object.keys(keyTypes).filter(\n//         (key) => !key.toLowerCase().includes(\"id\")\n//     );\n\n//     return (\n//         <>\n//             <button onClick={() => setIsEditing(true)}>Edit</button>\n//             {isEditing && (\n//                 <Modal onClose={handleCancelClick}>\n//                     <form>\n//                         {filteredKeys.map((key) => (\n//                             <div key={key}>\n//                                 <label htmlFor={key}>{key}</label>\n//                                 {keyTypes[key] === \"boolean\" ? (\n//                                     <select\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     >\n//                                         <option value={true}>True</option>\n//                                         <option value={false}>False</option>\n//                                     </select>\n//                                 ) : keyTypes[key] === \"number\" ? (\n//                                     <input\n//                                         type=\"number\"\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     />\n//                                 ) : (\n//                                     <input\n//                                         type=\"text\"\n//                                         name={key}\n//                                         value={editedData[key]}\n//                                         onChange={handleInputChange}\n//                                     />\n//                                 )}\n//                             </div>\n//                         ))}\n//                         <button type=\"button\" onClick={handleSaveClick}>\n//                             Save\n//                         </button>\n//                         <button type=\"button\" onClick={handleCancelClick}>\n//                             Cancel\n//                         </button>\n//                     </form>\n//                 </Modal>\n//             )}\n//         </>\n//     );\n// };\n\n// export default CreateButtonComponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}