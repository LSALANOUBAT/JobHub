{"ast":null,"code":"var _jsxFileName = \"/home/louis/T-WEB-501-PAR_50/frontend/src/pages/monitor/components/DataTable.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Table.css\";\nimport DeleteButtonComponent from \"./DeleteButton\";\nimport EditButtonComponent from \"./EditButton\";\nimport EditModal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTableComponent = ({\n  data,\n  columns,\n  apiUrl,\n  onDataFetched\n}) => {\n  _s();\n  const [fetchedData, setFetchedData] = useState([]);\n  const [editingRow, setEditingRow] = useState(null);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  useEffect(() => {\n    setFetchedData(data);\n  }, [data]);\n  const handleEditClick = row => {\n    setEditingRow(row);\n    setIsModalVisible(true);\n  };\n  const handleUpdate = updatedData => {\n    // Logic to update data via API (PUT request)\n    // ...\n\n    // Update the state and close the editing form\n    setFetchedData(prevData => prevData.map(row => row.id === updatedData.id ? {\n      ...row,\n      ...updatedData\n    } : row));\n    setIsModalVisible(false);\n    setEditingRow(null);\n  };\n  const handleCloseModal = () => {\n    setIsModalVisible(false);\n    setEditingRow(null);\n  };\n  useEffect(() => {\n    setFetchedData(data);\n  }, [data]);\n  const handleDataFetched = () => {\n    onDataFetched(fetchedData);\n  };\n  const handleCancelEdit = () => {\n    setIsModalVisible(false);\n    setEditingRow(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(EditModal, {\n      show: isModalVisible,\n      onHide: handleCloseModal,\n      row: editingRow,\n      columns: columns,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"dataTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"tableHeader\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [columns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: column.header\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"infoRow\",\n          children: [columns.map((column, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"infoRow\",\n            children: row[column.key]\n          }, columnIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(DeleteButtonComponent, {\n              id: row.id,\n              apiUrl: apiUrl,\n              dataFetching: handleDataFetched\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: editingRow && editingRow.id === row.id ? /*#__PURE__*/_jsxDEV(EditButtonComponent, {\n              row: editingRow,\n              columns: columns,\n              onUpdate: handleUpdate,\n              onCancel: handleCancelEdit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditClick(row),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(DataTableComponent, \"XKx5PxWrWzBIoszc3AN4fEhGhqw=\");\n_c = DataTableComponent;\nexport default DataTableComponent;\nvar _c;\n$RefreshReg$(_c, \"DataTableComponent\");","map":{"version":3,"names":["React","useState","useEffect","DeleteButtonComponent","EditButtonComponent","EditModal","jsxDEV","_jsxDEV","DataTableComponent","data","columns","apiUrl","onDataFetched","_s","fetchedData","setFetchedData","editingRow","setEditingRow","isModalVisible","setIsModalVisible","handleEditClick","row","handleUpdate","updatedData","prevData","map","id","handleCloseModal","handleDataFetched","handleCancelEdit","children","show","onHide","onUpdate","fileName","_jsxFileName","lineNumber","columnNumber","className","column","index","header","rowIndex","columnIndex","key","dataFetching","onCancel","onClick","_c","$RefreshReg$"],"sources":["/home/louis/T-WEB-501-PAR_50/frontend/src/pages/monitor/components/DataTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Table.css\";\nimport DeleteButtonComponent from \"./DeleteButton\";\nimport EditButtonComponent from \"./EditButton\";\nimport EditModal from \"./Modal\";\nconst DataTableComponent = ({ data, columns, apiUrl, onDataFetched }) => {\n    const [fetchedData, setFetchedData] = useState([]);\n    const [editingRow, setEditingRow] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() => {\n        setFetchedData(data);\n    }, [data]);\n\n    const handleEditClick = (row) => {\n        setEditingRow(row);\n        setIsModalVisible(true);\n    };\n\n    const handleUpdate = (updatedData) => {\n        // Logic to update data via API (PUT request)\n        // ...\n\n        // Update the state and close the editing form\n        setFetchedData((prevData) =>\n            prevData.map((row) =>\n                row.id === updatedData.id ? { ...row, ...updatedData } : row\n            )\n        );\n\n        setIsModalVisible(false);\n        setEditingRow(null);\n    };\n\n    const handleCloseModal = () => {\n        setIsModalVisible(false);\n        setEditingRow(null);\n    };\n\n    useEffect(() => {\n        setFetchedData(data);\n    }, [data]);\n\n    const handleDataFetched = () => {\n        onDataFetched(fetchedData);\n    };\n\n    const handleCancelEdit = () => {\n        setIsModalVisible(false);\n        setEditingRow(null);\n    };\n    return (\n        <div>\n            <EditModal\n                show={isModalVisible}\n                onHide={handleCloseModal}\n                row={editingRow}\n                columns={columns}\n                onUpdate={handleUpdate}\n            />\n            <table className=\"dataTable\">\n                <thead className=\"tableHeader\">\n                    <tr>\n                        {columns.map((column, index) => (\n                            <th key={index}>{column.header}</th>\n                        ))}\n                        <th>delete</th>\n                        <th>Edit</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((row, rowIndex) => (\n                        <tr className=\"infoRow\" key={rowIndex}>\n                            {columns.map((column, columnIndex) => (\n                                <td className=\"infoRow\" key={columnIndex}>\n                                    {row[column.key]}\n                                </td>\n                            ))}\n                            <td>\n                                <DeleteButtonComponent\n                                    id={row.id}\n                                    apiUrl={apiUrl}\n                                    dataFetching={handleDataFetched}\n                                />\n                            </td>\n                            <td>\n                                {editingRow && editingRow.id === row.id ? (\n                                    <EditButtonComponent\n                                        row={editingRow}\n                                        columns={columns}\n                                        onUpdate={handleUpdate}\n                                        onCancel={handleCancelEdit}\n                                    />\n                                ) : (\n                                    <button\n                                        onClick={() => handleEditClick(row)}\n                                    >\n                                        Edit\n                                    </button>\n                                )}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default DataTableComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}